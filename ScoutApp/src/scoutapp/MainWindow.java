/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scoutapp;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bjtex
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    TreeMap<Integer, Match> matches;
    private File currentFile;

    public MainWindow() {
       
       //Initialize GUI compenents at the proper states, intitialize matches TreeMap. 
        initComponents();
        matches = new TreeMap<Integer, Match>();
        //loadMatchesFromFile();
        jMenuItem_Save.setEnabled(false);
        jLabel_InsightsTeamNumber.setVisible(false);
        jLabel_InsightsTeamNumber.setText("Team Number");
        jTextField_InsightsTeamNumber.setVisible(false);
        jComboBox_InsightsColor.setVisible(false);
        jButton_SearchTeam.setVisible(false);
        
        jComboBox_DisplayScoreActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane_Tabs = new javax.swing.JTabbedPane();
        jPanel_RawPanel = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        jTable_Raw = new javax.swing.JTable();
        jPanel_Scout = new javax.swing.JPanel();
        jLabel_Field = new javax.swing.JLabel();
        jLabel_Auto = new javax.swing.JLabel();
        jLabel_Teleop = new javax.swing.JLabel();
        jLabel_AutoBehavior = new javax.swing.JLabel();
        jCheckBox_AutoB1 = new javax.swing.JCheckBox();
        jCheckBox_AutoB2 = new javax.swing.JCheckBox();
        jCheckBox_AutoB3 = new javax.swing.JCheckBox();
        jCheckBox_AutoB4 = new javax.swing.JCheckBox();
        jLabel_AutoUH = new javax.swing.JLabel();
        jTextField_AutoLHAttempt = new javax.swing.JTextField();
        jTextField_AutoUHAttempted = new javax.swing.JTextField();
        jLabel_AutoUHAttempted = new javax.swing.JLabel();
        jLabel_AutoLH = new javax.swing.JLabel();
        jTextField_AutoLH = new javax.swing.JTextField();
        jLabel_AutoLHAttempted = new javax.swing.JLabel();
        jTextField_AutoUH = new javax.swing.JTextField();
        jLabel_TeleopBehavior = new javax.swing.JLabel();
        jCheckBox_TeleopB1 = new javax.swing.JCheckBox();
        jCheckBox_TeleopB2 = new javax.swing.JCheckBox();
        jCheckBox_TeleopB3 = new javax.swing.JCheckBox();
        jLabel_TeleopIntakeBehavior = new javax.swing.JLabel();
        jCheckBox_TeleopIB1 = new javax.swing.JCheckBox();
        jCheckBox_TeleopIB2 = new javax.swing.JCheckBox();
        jCheckBox_TeleopIB3 = new javax.swing.JCheckBox();
        jLabel_IntakePerf = new javax.swing.JLabel();
        jLabel_IntakeNone = new javax.swing.JLabel();
        jLabel_IntakeAll = new javax.swing.JLabel();
        jSlider_IntakePerf = new javax.swing.JSlider();
        jLabel_ScoreAll = new javax.swing.JLabel();
        jSlider_ScorePerf = new javax.swing.JSlider();
        jLabel_ScorePerf = new javax.swing.JLabel();
        jLabel_ScoreNone = new javax.swing.JLabel();
        jLabel_DefAll = new javax.swing.JLabel();
        jSlider_DefPerf = new javax.swing.JSlider();
        jLabel_DefPerf = new javax.swing.JLabel();
        jLabel_DefNone = new javax.swing.JLabel();
        jLabel_TeleopUH = new javax.swing.JLabel();
        jTextField_TeleopUH = new javax.swing.JTextField();
        jLabel_TeleopLH = new javax.swing.JLabel();
        jTextField_TotalPoints = new javax.swing.JTextField();
        jLabel_EG = new javax.swing.JLabel();
        jCheckBox_EGB1 = new javax.swing.JCheckBox();
        jCheckBox_EGB2 = new javax.swing.JCheckBox();
        jCheckBox_EGB4 = new javax.swing.JCheckBox();
        jCheckBox_EGB5 = new javax.swing.JCheckBox();
        jCheckBox_EGB6 = new javax.swing.JCheckBox();
        jLabel_TotalPointsRobot = new javax.swing.JLabel();
        jLabel_TotalPointsMatch = new javax.swing.JLabel();
        jTextField_TeleopLH = new javax.swing.JTextField();
        jTextField_TotalPointsMatch = new javax.swing.JTextField();
        jLabel_Comments = new javax.swing.JLabel();
        jTextField_Comments = new javax.swing.JTextField();
        jSpinner_MatchNumber = new javax.swing.JSpinner();
        jLabel_MatchNumber = new javax.swing.JLabel();
        jButton_Submit = new javax.swing.JButton();
        jLabel_TeamNumber = new javax.swing.JLabel();
        jTextField_TeamNumber = new javax.swing.JTextField();
        jLabel_Placement = new javax.swing.JLabel();
        jSpinner_Placement = new javax.swing.JSpinner();
        jLabel_Color = new javax.swing.JLabel();
        jComboBox_Color = new javax.swing.JComboBox<>();
        jLabel_ScoutName = new javax.swing.JLabel();
        jTextField_ScoutName = new javax.swing.JTextField();
        jCheckBox_EGB3 = new javax.swing.JCheckBox();
        jPanel_Insights = new javax.swing.JPanel();
        jPanel_Graphics = new GraphicsPanelScore();
        jComboBox_DisplayScore = new javax.swing.JComboBox<>();
        jLabel_DisplayScore = new javax.swing.JLabel();
        jLabel_DisplayData = new javax.swing.JLabel();
        jComboBox_DisplayData = new javax.swing.JComboBox<>();
        jTextField_InsightsTeamNumber = new javax.swing.JTextField();
        jLabel_InsightsTeamNumber = new javax.swing.JLabel();
        jComboBox_InsightsColor = new javax.swing.JComboBox<>();
        jButton_SearchTeam = new javax.swing.JButton();
        jLabel_Top10Scores = new javax.swing.JLabel();
        jLabel_Top10AvgScoreMatch = new javax.swing.JLabel();
        jLabel_Top10AvgScorePerf = new javax.swing.JLabel();
        jLabel_Top10AvgIntake = new javax.swing.JLabel();
        jLabel_Top10AvgDef = new javax.swing.JLabel();
        jScrollPane_TopMatchScores = new javax.swing.JScrollPane();
        jTable_TopMatchScores = new javax.swing.JTable();
        jScrollPane_TopAvgMatchScores = new javax.swing.JScrollPane();
        jTable_TopAvgMatchScores = new javax.swing.JTable();
        jScrollPane_TopAvgScorePerf = new javax.swing.JScrollPane();
        jTable_TopAvgScorePerf = new javax.swing.JTable();
        jScrollPane_TopIntake = new javax.swing.JScrollPane();
        jTable_TopIntake = new javax.swing.JTable();
        jScrollPane_TopDef = new javax.swing.JScrollPane();
        jTable_TopDef = new javax.swing.JTable();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_Save = new javax.swing.JMenuItem();
        jMenuItem_SaveAs = new javax.swing.JMenuItem();
        jMenuItem_Open = new javax.swing.JMenuItem();
        jMenuItem_OpenCSV = new javax.swing.JMenuItem();
        jMenu_Edit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable_Raw.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Match #", "Team #", "Scout Name", "Total Points.", "Comment"
            }
        ));
        jScrollPane.setViewportView(jTable_Raw);

        javax.swing.GroupLayout jPanel_RawPanelLayout = new javax.swing.GroupLayout(jPanel_RawPanel);
        jPanel_RawPanel.setLayout(jPanel_RawPanelLayout);
        jPanel_RawPanelLayout.setHorizontalGroup(
            jPanel_RawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RawPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1454, Short.MAX_VALUE))
        );
        jPanel_RawPanelLayout.setVerticalGroup(
            jPanel_RawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RawPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        jTabbedPane_Tabs.addTab("Raw Data", jPanel_RawPanel);

        jPanel_Scout.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel_ScoutMouseMoved(evt);
            }
        });

        jLabel_Field.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/field.png"))); // NOI18N

        jLabel_Auto.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel_Auto.setText("Auto");

        jLabel_Teleop.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel_Teleop.setText("Tele-Op");

        jLabel_AutoBehavior.setText("Auto Behavior:");

        jCheckBox_AutoB1.setText("Did Not Move");

        jCheckBox_AutoB2.setText("Taxied");

        jCheckBox_AutoB3.setText("Attempted to Score");

        jCheckBox_AutoB4.setText("Attempted Cargo");

        jLabel_AutoUH.setText("Upper Hub Shots Made:");

        jLabel_AutoUHAttempted.setText("Upper Hub Shots Attempted:");

        jLabel_AutoLH.setText("Lower Hub Shots Made:");

        jLabel_AutoLHAttempted.setText("Lower Hub Shots Attempted:");

        jLabel_TeleopBehavior.setText("Teleop Behavior:");

        jCheckBox_TeleopB1.setText("Did Not Move");

        jCheckBox_TeleopB2.setText("Attempted Pickup of Cargo");

        jCheckBox_TeleopB3.setText("Attempted to Score");

        jLabel_TeleopIntakeBehavior.setText("How Robot Picked Up Cargo");

        jCheckBox_TeleopIB1.setText("No Cargo Pickup");

        jCheckBox_TeleopIB2.setText("From Human Player");

        jCheckBox_TeleopIB3.setText("Intake on Robot");

        jLabel_IntakePerf.setText("Intake Peformance");

        jLabel_IntakeNone.setText("None");

        jLabel_IntakeAll.setText("Consistent / Reliable");

        jLabel_ScoreAll.setText("Consistent / Reliable");

        jLabel_ScorePerf.setText("Scoring Peformance");

        jLabel_ScoreNone.setText("None");

        jLabel_DefAll.setText("Unstoppable");

        jLabel_DefPerf.setText("Defensive Skill");

        jLabel_DefNone.setText("None");

        jLabel_TeleopUH.setText("Upper Hub Shots Made:");

        jLabel_TeleopLH.setText("Lower Hub Shots Made:");

        jTextField_TotalPoints.setEditable(false);

        jLabel_EG.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel_EG.setText("End Game");

        jCheckBox_EGB1.setText("Didn't Attempt to Climb");

        jCheckBox_EGB2.setText("Atempted, But Didn't Climb");

        jCheckBox_EGB4.setText("Mid Rung");

        jCheckBox_EGB5.setText("High Rung");

        jCheckBox_EGB6.setText("Traversal");

        jLabel_TotalPointsRobot.setText("Total Points (Robot)");

        jLabel_TotalPointsMatch.setText("Total Points (Match)");

        jTextField_TotalPointsMatch.setEditable(false);

        jLabel_Comments.setText("Comments:");

        jLabel_MatchNumber.setText("Match Number");

        jButton_Submit.setText("SUBMIT MATCH");
        jButton_Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SubmitActionPerformed(evt);
            }
        });

        jLabel_TeamNumber.setText("Robot Team Number");

        jLabel_Placement.setText("Field Placement");

        jLabel_Color.setText("Alliance Color");

        jComboBox_Color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Blue" }));

        jLabel_ScoutName.setText("Scout Name");

        jCheckBox_EGB3.setText("Low Rung");

        javax.swing.GroupLayout jPanel_ScoutLayout = new javax.swing.GroupLayout(jPanel_Scout);
        jPanel_Scout.setLayout(jPanel_ScoutLayout);
        jPanel_ScoutLayout.setHorizontalGroup(
            jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel_DefPerf))
                                    .addComponent(jLabel_IntakePerf)))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_IntakeNone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSlider_IntakePerf, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_IntakeAll))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_ScoreNone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSlider_ScorePerf, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_ScoreAll))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_DefNone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSlider_DefPerf, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_DefAll))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_TeleopUH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_TeleopUH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(jLabel_TeleopLH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_TeleopLH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(jLabel_ScorePerf)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_Submit)
                        .addGap(247, 247, 247))
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel_AutoBehavior)
                                            .addComponent(jCheckBox_AutoB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBox_AutoB2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBox_AutoB3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                            .addComponent(jCheckBox_AutoB4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(50, 50, 50)
                                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                                .addComponent(jLabel_AutoLH)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jTextField_AutoLH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                                .addComponent(jLabel_AutoLHAttempted)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextField_AutoLHAttempt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel_AutoUHAttempted)
                                                    .addComponent(jLabel_AutoUH))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTextField_AutoUH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextField_AutoUHAttempted, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                        .addGap(122, 122, 122)
                                        .addComponent(jLabel_Auto, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                        .addGap(112, 112, 112)
                                        .addComponent(jLabel_Teleop, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_Field))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel_TeleopIntakeBehavior)
                                    .addComponent(jCheckBox_TeleopIB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox_TeleopIB2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox_TeleopIB3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel_TeleopBehavior)
                                .addComponent(jCheckBox_TeleopB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox_TeleopB2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox_TeleopB3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                                    .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                            .addComponent(jLabel_Color)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jComboBox_Color, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                                .addComponent(jLabel_Placement)
                                                .addGap(18, 18, 18)
                                                .addComponent(jSpinner_Placement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                                .addComponent(jLabel_MatchNumber)
                                                .addGap(18, 18, 18)
                                                .addComponent(jSpinner_MatchNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(27, 27, 27))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                                    .addComponent(jLabel_TeamNumber)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField_TeamNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                                    .addComponent(jLabel_ScoutName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField_ScoutName, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel_EG)))
                        .addGap(465, 465, 465))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel_TotalPointsMatch)
                                    .addComponent(jLabel_TotalPointsRobot))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField_TotalPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_TotalPointsMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_Comments)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_Comments, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ScoutLayout.createSequentialGroup()
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox_EGB1)
                                    .addComponent(jCheckBox_EGB6)
                                    .addComponent(jCheckBox_EGB5)
                                    .addComponent(jCheckBox_EGB3)
                                    .addComponent(jCheckBox_EGB4)
                                    .addComponent(jCheckBox_EGB2))
                                .addGap(61, 61, 61)))
                        .addGap(399, 399, 399))))
        );
        jPanel_ScoutLayout.setVerticalGroup(
            jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel_Auto)
                        .addGap(22, 22, 22)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_AutoBehavior)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_AutoB1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_AutoB2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_AutoB3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_AutoB4))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel_AutoUH)
                                    .addComponent(jTextField_AutoUH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel_AutoUHAttempted)
                                    .addComponent(jTextField_AutoUHAttempted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel_AutoLH)
                                    .addComponent(jTextField_AutoLH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel_AutoLHAttempted)
                                    .addComponent(jTextField_AutoLHAttempt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_Teleop))
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner_MatchNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_MatchNumber))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner_Placement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_Placement))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Color)
                            .addComponent(jComboBox_Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_TeamNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_TeamNumber))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_ScoutName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_ScoutName))
                        .addGap(79, 79, 79)
                        .addComponent(jLabel_EG))
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel_Field)))
                .addGap(42, 42, 42)
                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_TeleopBehavior)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_TeleopB1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_TeleopB2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_TeleopB3))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addComponent(jLabel_TeleopIntakeBehavior)
                                .addGap(8, 8, 8)
                                .addComponent(jCheckBox_TeleopIB1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_TeleopIB2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_TeleopIB3)))
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jButton_Submit))
                            .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_IntakePerf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSlider_IntakePerf, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_IntakeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_IntakeNone))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_ScorePerf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSlider_ScorePerf, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_ScoreAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_ScoreNone))
                                .addGap(30, 30, 30)
                                .addComponent(jLabel_DefPerf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSlider_DefPerf, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_DefAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_DefNone))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_TeleopUH)
                            .addComponent(jLabel_TeleopLH)
                            .addComponent(jTextField_TeleopUH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_TeleopLH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel_ScoutLayout.createSequentialGroup()
                        .addComponent(jCheckBox_EGB1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_EGB2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox_EGB3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_EGB4)
                        .addGap(5, 5, 5)
                        .addComponent(jCheckBox_EGB5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox_EGB6)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_TotalPointsRobot)
                            .addComponent(jTextField_TotalPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_TotalPointsMatch)
                            .addComponent(jTextField_TotalPointsMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel_ScoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Comments)
                            .addComponent(jTextField_Comments, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28))
        );

        jTabbedPane_Tabs.addTab("Scout Match", jPanel_Scout);

        javax.swing.GroupLayout jPanel_GraphicsLayout = new javax.swing.GroupLayout(jPanel_Graphics);
        jPanel_Graphics.setLayout(jPanel_GraphicsLayout);
        jPanel_GraphicsLayout.setHorizontalGroup(
            jPanel_GraphicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        jPanel_GraphicsLayout.setVerticalGroup(
            jPanel_GraphicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jComboBox_DisplayScore.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Teams", "Specific Team", "Alliance Color" }));
        jComboBox_DisplayScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_DisplayScoreActionPerformed(evt);
            }
        });

        jLabel_DisplayScore.setText("Display Score Type");

        jLabel_DisplayData.setText("Display Data Type");

        jComboBox_DisplayData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Total Score", "Auto", "TeleOp", "End Game" }));
        jComboBox_DisplayData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_DisplayDataActionPerformed(evt);
            }
        });

        jTextField_InsightsTeamNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_InsightsTeamNumberActionPerformed(evt);
            }
        });

        jLabel_InsightsTeamNumber.setText("Team Number");

        jComboBox_InsightsColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Blue", "Red" }));
        jComboBox_InsightsColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_InsightsColorActionPerformed(evt);
            }
        });

        jButton_SearchTeam.setText("Search Team");
        jButton_SearchTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SearchTeamActionPerformed(evt);
            }
        });

        jLabel_Top10Scores.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_Top10Scores.setText("Top 10 Highest Match Scores");

        jLabel_Top10AvgScoreMatch.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_Top10AvgScoreMatch.setText("Top 10 Highest Average Match Scores");

        jLabel_Top10AvgScorePerf.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_Top10AvgScorePerf.setText("Top 10 Highest Average Scoring Performances");

        jLabel_Top10AvgIntake.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_Top10AvgIntake.setText("Top 10 Highest Average Intake Ratings");

        jLabel_Top10AvgDef.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_Top10AvgDef.setText("Top 10 Highest Average Defense Ratings");

        jTable_TopMatchScores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Match", "Total Score", "Red 1", "Red 2", "Red 3", "Blue 1", "Blue 2", "Blue 3"
            }
        ));
        jScrollPane_TopMatchScores.setViewportView(jTable_TopMatchScores);
        if (jTable_TopMatchScores.getColumnModel().getColumnCount() > 0) {
            jTable_TopMatchScores.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_TopMatchScores.getColumnModel().getColumn(1).setPreferredWidth(60);
            jTable_TopMatchScores.getColumnModel().getColumn(2).setHeaderValue("Red 1");
            jTable_TopMatchScores.getColumnModel().getColumn(3).setHeaderValue("Red 2");
            jTable_TopMatchScores.getColumnModel().getColumn(4).setHeaderValue("Red 3");
            jTable_TopMatchScores.getColumnModel().getColumn(5).setHeaderValue("Blue 1");
            jTable_TopMatchScores.getColumnModel().getColumn(6).setHeaderValue("Blue 2");
            jTable_TopMatchScores.getColumnModel().getColumn(7).setHeaderValue("Blue 3");
        }

        jTable_TopAvgMatchScores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Team Number", "Average Score"
            }
        ));
        jScrollPane_TopAvgMatchScores.setViewportView(jTable_TopAvgMatchScores);
        if (jTable_TopAvgMatchScores.getColumnModel().getColumnCount() > 0) {
            jTable_TopAvgMatchScores.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_TopAvgMatchScores.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        jTable_TopAvgScorePerf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Team Number", "Average Score"
            }
        ));
        jScrollPane_TopAvgScorePerf.setViewportView(jTable_TopAvgScorePerf);
        if (jTable_TopAvgScorePerf.getColumnModel().getColumnCount() > 0) {
            jTable_TopAvgScorePerf.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_TopAvgScorePerf.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        jTable_TopIntake.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Team Number", "Average Score"
            }
        ));
        jScrollPane_TopIntake.setViewportView(jTable_TopIntake);
        if (jTable_TopIntake.getColumnModel().getColumnCount() > 0) {
            jTable_TopIntake.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_TopIntake.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        jTable_TopDef.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Team Number", "Average Score"
            }
        ));
        jScrollPane_TopDef.setViewportView(jTable_TopDef);
        if (jTable_TopDef.getColumnModel().getColumnCount() > 0) {
            jTable_TopDef.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_TopDef.getColumnModel().getColumn(1).setPreferredWidth(60);
        }

        javax.swing.GroupLayout jPanel_InsightsLayout = new javax.swing.GroupLayout(jPanel_Insights);
        jPanel_Insights.setLayout(jPanel_InsightsLayout);
        jPanel_InsightsLayout.setHorizontalGroup(
            jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_Graphics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                        .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_DisplayScore, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_DisplayData, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox_DisplayData, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox_DisplayScore, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_InsightsTeamNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                                .addComponent(jTextField_InsightsTeamNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_InsightsColor, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton_SearchTeam))))
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane_TopMatchScores, javax.swing.GroupLayout.PREFERRED_SIZE, 875, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel_Top10AvgIntake)
                                .addGap(144, 144, 144)
                                .addComponent(jLabel_Top10AvgDef))
                            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel_Top10AvgScoreMatch)
                                        .addGap(109, 109, 109))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_InsightsLayout.createSequentialGroup()
                                        .addComponent(jScrollPane_TopAvgMatchScores, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)))
                                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel_Top10AvgScorePerf)
                                    .addComponent(jScrollPane_TopAvgScorePerf, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jScrollPane_TopIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jScrollPane_TopDef, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(184, 184, 184))
                    .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(jLabel_Top10Scores)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel_InsightsLayout.setVerticalGroup(
            jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_Graphics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_DisplayScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_DisplayScore)
                    .addComponent(jTextField_InsightsTeamNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_InsightsTeamNumber)
                    .addComponent(jComboBox_InsightsColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox_DisplayData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_DisplayData))
                        .addContainerGap(159, Short.MAX_VALUE))
                    .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_SearchTeam)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel_InsightsLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel_Top10Scores)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane_TopMatchScores, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Top10AvgScoreMatch)
                    .addComponent(jLabel_Top10AvgScorePerf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane_TopAvgMatchScores, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane_TopAvgScorePerf, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Top10AvgIntake)
                    .addComponent(jLabel_Top10AvgDef))
                .addGap(22, 22, 22)
                .addGroup(jPanel_InsightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane_TopIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane_TopDef, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane_Tabs.addTab("Insights", jPanel_Insights);

        jMenu_File.setText("File");

        jMenuItem_Save.setText("Save");
        jMenuItem_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save);

        jMenuItem_SaveAs.setText("Save As");
        jMenuItem_SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveAsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_SaveAs);

        jMenuItem_Open.setText("Open");
        jMenuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Open);

        jMenuItem_OpenCSV.setText("Open CSV");
        jMenuItem_OpenCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenCSVActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_OpenCSV);

        jMenuBar.add(jMenu_File);

        jMenu_Edit.setText("Edit");
        jMenuBar.add(jMenu_Edit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane_Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 1469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane_Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveActionPerformed
        // Test to see if there is a current file, then act accordingly
        if (currentFile != null) {
            saveFile(currentFile);
        } else {
            JFileChooser jfc = new JFileChooser();

            if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                saveFile(jfc.getSelectedFile());
            }
        }

    }//GEN-LAST:event_jMenuItem_SaveActionPerformed

    private void jMenuItem_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveAsActionPerformed
// Prompts the user for a file to sve location and name. then creates
        // a matchModel with the <matches> object. The model is
        // then saved to the disk.

        JFileChooser jfc = new JFileChooser();

        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jfc.getSelectedFile();
            saveFile(jfc.getSelectedFile());

            jMenuItem_Save.setEnabled(true);
        }


    }//GEN-LAST:event_jMenuItem_SaveAsActionPerformed

    private void jMenuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenActionPerformed
        // Prompts the user for a file to open location and name. then creates
        // a matchModel with  the <matches> object saved in the file on the disk. 
        // The model is then used to run updateRawTable.
        JFileChooser jfc = new JFileChooser();

        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {

                File selectedFile = jfc.getSelectedFile();
                currentFile = selectedFile;

                FileInputStream fis = new FileInputStream(selectedFile);
                ObjectInputStream ois = new ObjectInputStream(fis);

                matchModel model = (matchModel) ois.readObject();

                matches.clear();
                System.out.println(selectedFile);

                for (Integer key : model.getMatches().keySet()) {
                    matches.put(key, model.getMatches().get(key));
                }
              
                ois.close();
                updateRawTable();
                System.out.println(selectedFile);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            jMenuItem_Save.setEnabled(true);

        }
    }

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {
        // Test to see if there is a current file, then act accordingly
        if (currentFile != null) {
            saveFile(currentFile);
        } else {
            JFileChooser jfc = new JFileChooser();

            if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                saveFile(jfc.getSelectedFile());
            }
        }    }//GEN-LAST:event_jMenuItem_OpenActionPerformed

    private void jPanel_ScoutMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        int score = 0;
        score += jTextField_AutoUH.getText().equals("") ? 0 : Integer.parseInt(jTextField_AutoUH.getText()) * 4;
        score += jTextField_AutoLH.getText().equals("") ? 0 : Integer.parseInt(jTextField_AutoLH.getText()) * 2;
        
        score += jTextField_TeleopUH.getText().equals("") ? 0 : Integer.parseInt(jTextField_TeleopUH.getText()) * 2;
        score += jTextField_TeleopLH.getText().equals("") ? 0 : Integer.parseInt(jTextField_TeleopLH.getText()) * 1;
        
        if(jCheckBox_EGB6.isSelected()) {
            score += 15;
        }
        else if(jCheckBox_EGB5.isSelected()) {
            score += 10;
        }
        else if(jCheckBox_EGB4.isSelected()) {
            score += 6;
        }
        else if (jCheckBox_EGB3.isSelected()) {
            score += 4;
        }
        
        jTextField_TotalPoints.setText(Integer.toString(score));
        
        if (matches.containsKey((int)(jSpinner_MatchNumber.getValue()))) {
            jTextField_TotalPointsMatch.setText("(" + Integer.toString(matches.get((int)(jSpinner_MatchNumber.getValue())).getMatchScore(Match.AllianceColor.ALL)) + "): RED: " + Integer.toString(matches.get((int)(jSpinner_MatchNumber.getValue())).getMatchScore(Match.AllianceColor.RED)) + " / BLUE: " + Integer.toString(matches.get((int)(jSpinner_MatchNumber.getValue())).getMatchScore(Match.AllianceColor.BLUE)));
        }
        
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jButton_SearchTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SearchTeamActionPerformed
        //Modifiy GraphicsPanelScore based on an alliance color that is selected
        Match.AllianceColor ac;
        if (jComboBox_InsightsColor.getSelectedIndex() != 0) {
            ac = Match.AllianceColor.RED;
        }
        else {
            ac = Match.AllianceColor.BLUE;
        }

        switch (jComboBox_DisplayData.getSelectedIndex()){
            case 1 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.AUTO, ac);
            case 2 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.END_GAME, ac);
            case 3 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.TELEOP, ac);
            default -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.ALL_POINTS, ac);
        }
    }//GEN-LAST:event_jButton_SearchTeamActionPerformed

    private void jComboBox_InsightsColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_InsightsColorActionPerformed
        jComboBox_DisplayScoreActionPerformed(null);
    }//GEN-LAST:event_jComboBox_InsightsColorActionPerformed

    private void jTextField_InsightsTeamNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_InsightsTeamNumberActionPerformed
        //Modifies the GraphicsPanelScore based on an alliance color that is selected.
        Match.AllianceColor ac;
        if (jComboBox_InsightsColor.getSelectedIndex() != 0) {
            ac = Match.AllianceColor.RED;
        }
        else {
            ac = Match.AllianceColor.BLUE;
        }

        switch (jComboBox_DisplayData.getSelectedIndex()){
            case 1 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.AUTO, ac);
            case 2 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.TELEOP, ac);
            case 3 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.END_GAME, ac);
            default -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), GraphicsPanelScore.DataType.TEAM, GraphicsPanelScore.ScoreType.ALL_POINTS, ac);
        }
    }//GEN-LAST:event_jTextField_InsightsTeamNumberActionPerformed

    private void jComboBox_DisplayDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_DisplayDataActionPerformed
        // Modify the graphicspanelscore based on the item selected in a combo box for an individual team

        GraphicsPanelScore.DataType dt;
        switch (jComboBox_DisplayScore.getSelectedIndex()) {
            case 0:
            jLabel_InsightsTeamNumber.setVisible(false);
            jLabel_InsightsTeamNumber.setText("Team Number");
            jTextField_InsightsTeamNumber.setVisible(false);
            jComboBox_InsightsColor.setVisible(false);
            jButton_SearchTeam.setVisible(false);
            dt = GraphicsPanelScore.DataType.ALL;
            break;
            case 1:
            jLabel_InsightsTeamNumber.setVisible(true);
            jLabel_InsightsTeamNumber.setText("Team Number");
            jTextField_InsightsTeamNumber.setVisible(true);
            jComboBox_InsightsColor.setVisible(false);
            jButton_SearchTeam.setVisible(true);
            dt = GraphicsPanelScore.DataType.TEAM;
            break;
            default:
            jLabel_InsightsTeamNumber.setVisible(true);
            jLabel_InsightsTeamNumber.setText("Alliance Color");
            jTextField_InsightsTeamNumber.setVisible(false);
            jComboBox_InsightsColor.setVisible(true);
            jButton_SearchTeam.setVisible(false);
            dt = GraphicsPanelScore.DataType.ALLIANCE;
            break;
        }

        //sets the Match.AllianceColor value to red or blue based on a combobox
        Match.AllianceColor ac;
        if (jComboBox_InsightsColor.getSelectedIndex() != 0) {
            ac = Match.AllianceColor.RED;
        }
        else {
            ac = Match.AllianceColor.BLUE;
        }

        //Uses a switch to determine what section of game points to display in the graph
        switch (jComboBox_DisplayData.getSelectedIndex()){
            case 1 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.AUTO, ac);
            case 2 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.TELEOP, ac);
            case 3 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.END_GAME, ac);
            default -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.ALL_POINTS, ac);
        }
    }//GEN-LAST:event_jComboBox_DisplayDataActionPerformed

    private void jComboBox_DisplayScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_DisplayScoreActionPerformed
        // Creates a specific graphics panel determined by the item selected in the jComboBox_DisplayScore combobox using a switch

        GraphicsPanelScore.DataType dt;
        switch (jComboBox_DisplayScore.getSelectedIndex()) {
            case 0:
            jLabel_InsightsTeamNumber.setVisible(false);
            jLabel_InsightsTeamNumber.setText("Team Number");
            jTextField_InsightsTeamNumber.setVisible(false);
            jTextField_InsightsTeamNumber.setText("");
            jComboBox_InsightsColor.setVisible(false);
            jButton_SearchTeam.setVisible(false);
            dt = GraphicsPanelScore.DataType.ALL;
            break;
            case 1:
            jLabel_InsightsTeamNumber.setVisible(true);
            jLabel_InsightsTeamNumber.setText("Team Number");
            jTextField_InsightsTeamNumber.setVisible(true);
            jTextField_InsightsTeamNumber.setText("");
            jComboBox_InsightsColor.setVisible(false);
            jButton_SearchTeam.setVisible(true);
            dt = GraphicsPanelScore.DataType.TEAM;
            break;
            default:
            jLabel_InsightsTeamNumber.setVisible(true);
            jLabel_InsightsTeamNumber.setText("Alliance Color");
            jTextField_InsightsTeamNumber.setVisible(false);
            jTextField_InsightsTeamNumber.setText("");
            jComboBox_InsightsColor.setVisible(true);
            jButton_SearchTeam.setVisible(false);
            dt = GraphicsPanelScore.DataType.ALLIANCE;
            break;
        }

        //sets the Match.AllianceColor value to red or blue based on a combobox
        Match.AllianceColor ac;
        if (jComboBox_InsightsColor.getSelectedIndex() != 0) {
            ac = Match.AllianceColor.RED;
        }
        else {
            ac = Match.AllianceColor.BLUE;
        }
        //Uses a switch to determine what section of game points to display in the graph
        switch (jComboBox_DisplayData.getSelectedIndex()){
            case 1 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.AUTO, ac);
            case 2 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.TELEOP, ac);
            case 3 -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.END_GAME, ac);
            default -> ((GraphicsPanelScore)(jPanel_Graphics)).paintData(matches, jTextField_InsightsTeamNumber.getText(), dt, GraphicsPanelScore.ScoreType.ALL_POINTS, ac);
        }
    }//GEN-LAST:event_jComboBox_DisplayScoreActionPerformed


    private void jButton_SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SubmitActionPerformed
        //Takes all data from user filled fields and stores them into a <match> inside the matches treemap.
        clearHighlights();
        if (!checkSubmissions()) {
            return;
        }
        //uses data classes for auto, teleop, robot and endgame as well as switches located inside those data classes to determine values for the match that will be stored
        //the match treemap.
        Auto a;
        if (jCheckBox_AutoB4.isSelected()) {
            a = new Auto(Integer.parseInt(jTextField_AutoUH.getText()), Integer.parseInt(jTextField_AutoUHAttempted.getText()), Integer.parseInt(jTextField_AutoLH.getText()), Integer.parseInt(jTextField_AutoLHAttempt.getText()), 2, jCheckBox_AutoB2.isSelected());
        } else if (jCheckBox_AutoB3.isSelected()) {
            a = new Auto(Integer.parseInt(jTextField_AutoUH.getText()), Integer.parseInt(jTextField_AutoUHAttempted.getText()), Integer.parseInt(jTextField_AutoLH.getText()), Integer.parseInt(jTextField_AutoLHAttempt.getText()), 1, jCheckBox_AutoB2.isSelected());
        } else {
            a = new Auto(Integer.parseInt(jTextField_AutoUH.getText()), Integer.parseInt(jTextField_AutoUHAttempted.getText()), Integer.parseInt(jTextField_AutoLH.getText()), Integer.parseInt(jTextField_AutoLHAttempt.getText()), 0, jCheckBox_AutoB2.isSelected());
        }

        TeleOp t;
        int tb;
        if (jCheckBox_TeleopB3.isSelected()) {
            tb = 3;
        } else if (jCheckBox_TeleopB2.isSelected()) {
            tb = 2;
        } else {
            tb = 1;
        }

        int cb;
        if (jCheckBox_TeleopIB3.isSelected()) {
            cb = 3;
        } else if (jCheckBox_TeleopIB2.isSelected()) {
            cb = 2;
        } else {
            cb = 1;
        }
        t = new TeleOp(Integer.parseInt(jTextField_TeleopUH.getText()), Integer.parseInt(jTextField_TeleopLH.getText()), tb, 0.01 * jSlider_IntakePerf.getValue(), 0.01 * jSlider_ScorePerf.getValue(), 0.01 * jSlider_DefPerf.getValue(), cb);

        EndGame e;
        if (jCheckBox_EGB6.isSelected()) {
            e = new EndGame(5);
        } else if (jCheckBox_EGB5.isSelected()) {
            e = new EndGame(4);
        } else if (jCheckBox_EGB4.isSelected()) {
            e = new EndGame(3);
        } else if (jCheckBox_EGB3.isSelected()) {
            e = new EndGame(2);
        } else {
            e = new EndGame(1);
        }

        Robot r = new Robot((Integer) (jSpinner_MatchNumber.getValue()), (String) (jComboBox_Color.getSelectedItem()), (Integer) (jSpinner_Placement.getValue()), Integer.parseInt(jTextField_TeamNumber.getText()), jTextField_ScoutName.getText(), jTextField_Comments.getText(), a, t, e);

        if (matches.containsKey((Integer) (jSpinner_MatchNumber.getValue()))) {

            matches.get((Integer) (jSpinner_MatchNumber.getValue())).setRobot(r);
        } else {

            Match m = new Match((Integer) (jSpinner_MatchNumber.getValue()));
            m.setRobot(r);

            matches.put((Integer) (jSpinner_MatchNumber.getValue()), m);
        }

        updateRawTable();

        //Clear all fields after submitting a match
        jCheckBox_AutoB1.setSelected(false);
        jCheckBox_AutoB2.setSelected(false);
        jCheckBox_AutoB3.setSelected(false);
        jCheckBox_AutoB4.setSelected(false);
        jCheckBox_TeleopB1.setSelected(false);
        jCheckBox_TeleopB2.setSelected(false);
        jCheckBox_TeleopB3.setSelected(false);
        jCheckBox_TeleopIB1.setSelected(false);
        jCheckBox_TeleopIB2.setSelected(false);
        jCheckBox_TeleopIB3.setSelected(false);
        jCheckBox_EGB1.setSelected(false);
        jCheckBox_EGB2.setSelected(false);
        jCheckBox_EGB4.setSelected(false);
        jCheckBox_EGB5.setSelected(false);
        jCheckBox_EGB6.setSelected(false);
        jCheckBox_EGB3.setSelected(false);

        jTextField_AutoLHAttempt.setText("");
        jTextField_AutoUHAttempted.setText("");
        jTextField_AutoLH.setText("");
        jTextField_AutoUH.setText("");
        jTextField_TeleopUH.setText("");
        jTextField_TotalPoints.setText("");
        jTextField_TeleopLH.setText("");
        jTextField_TotalPointsMatch.setText("");
        jTextField_Comments.setText("");
        jTextField_TeamNumber.setText("");
        jTextField_ScoutName.setText("");

        jSlider_IntakePerf.setValue(50);
        jSlider_ScorePerf.setValue(50);
        jSlider_DefPerf.setValue(50);

        jSpinner_MatchNumber.setValue(0);
        jSpinner_Placement.setValue(0);

        jComboBox_Color.setSelectedIndex(0);
    }//GEN-LAST:event_jButton_SubmitActionPerformed

    private void jMenuItem_OpenCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenCSVActionPerformed
        // Prompts the user for a file to open location and name. then creates
        // a matchModel with  the <matches> object saved in the file on the disk. 
        // The model is then used to run updateRawTable.
        JFileChooser jfc = new JFileChooser();

        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        
            File selectedFile = jfc.getSelectedFile();

            if (!selectedFile.exists()) {
                System.out.println(selectedFile.getPath() + " Does Not Exist");
                return; 
            }
            if (!selectedFile.getPath().contains("csv")) {
                System.out.println(selectedFile.getPath() + " Is Not A .csv");
                JOptionPane.showMessageDialog(this, "ERROR: (" + selectedFile.getPath() + ") Is Not A .csv. Please chose a .csv.", "CSV Open Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            loadMatchesFromCSV(selectedFile.getPath());

            updateRawTable();
            System.out.println(selectedFile);
            
        }
    }//GEN-LAST:event_jMenuItem_OpenCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_SearchTeam;
    private javax.swing.JButton jButton_Submit;
    private javax.swing.JCheckBox jCheckBox_AutoB1;
    private javax.swing.JCheckBox jCheckBox_AutoB2;
    private javax.swing.JCheckBox jCheckBox_AutoB3;
    private javax.swing.JCheckBox jCheckBox_AutoB4;
    private javax.swing.JCheckBox jCheckBox_EGB1;
    private javax.swing.JCheckBox jCheckBox_EGB2;
    private javax.swing.JCheckBox jCheckBox_EGB3;
    private javax.swing.JCheckBox jCheckBox_EGB4;
    private javax.swing.JCheckBox jCheckBox_EGB5;
    private javax.swing.JCheckBox jCheckBox_EGB6;
    private javax.swing.JCheckBox jCheckBox_TeleopB1;
    private javax.swing.JCheckBox jCheckBox_TeleopB2;
    private javax.swing.JCheckBox jCheckBox_TeleopB3;
    private javax.swing.JCheckBox jCheckBox_TeleopIB1;
    private javax.swing.JCheckBox jCheckBox_TeleopIB2;
    private javax.swing.JCheckBox jCheckBox_TeleopIB3;
    private javax.swing.JComboBox<String> jComboBox_Color;
    private javax.swing.JComboBox<String> jComboBox_DisplayData;
    private javax.swing.JComboBox<String> jComboBox_DisplayScore;
    private javax.swing.JComboBox<String> jComboBox_InsightsColor;
    private javax.swing.JLabel jLabel_Auto;
    private javax.swing.JLabel jLabel_AutoBehavior;
    private javax.swing.JLabel jLabel_AutoLH;
    private javax.swing.JLabel jLabel_AutoLHAttempted;
    private javax.swing.JLabel jLabel_AutoUH;
    private javax.swing.JLabel jLabel_AutoUHAttempted;
    private javax.swing.JLabel jLabel_Color;
    private javax.swing.JLabel jLabel_Comments;
    private javax.swing.JLabel jLabel_DefAll;
    private javax.swing.JLabel jLabel_DefNone;
    private javax.swing.JLabel jLabel_DefPerf;
    private javax.swing.JLabel jLabel_DisplayData;
    private javax.swing.JLabel jLabel_DisplayScore;
    private javax.swing.JLabel jLabel_EG;
    private javax.swing.JLabel jLabel_Field;
    private javax.swing.JLabel jLabel_InsightsTeamNumber;
    private javax.swing.JLabel jLabel_IntakeAll;
    private javax.swing.JLabel jLabel_IntakeNone;
    private javax.swing.JLabel jLabel_IntakePerf;
    private javax.swing.JLabel jLabel_MatchNumber;
    private javax.swing.JLabel jLabel_Placement;
    private javax.swing.JLabel jLabel_ScoreAll;
    private javax.swing.JLabel jLabel_ScoreNone;
    private javax.swing.JLabel jLabel_ScorePerf;
    private javax.swing.JLabel jLabel_ScoutName;
    private javax.swing.JLabel jLabel_TeamNumber;
    private javax.swing.JLabel jLabel_Teleop;
    private javax.swing.JLabel jLabel_TeleopBehavior;
    private javax.swing.JLabel jLabel_TeleopIntakeBehavior;
    private javax.swing.JLabel jLabel_TeleopLH;
    private javax.swing.JLabel jLabel_TeleopUH;
    private javax.swing.JLabel jLabel_Top10AvgDef;
    private javax.swing.JLabel jLabel_Top10AvgIntake;
    private javax.swing.JLabel jLabel_Top10AvgScoreMatch;
    private javax.swing.JLabel jLabel_Top10AvgScorePerf;
    private javax.swing.JLabel jLabel_Top10Scores;
    private javax.swing.JLabel jLabel_TotalPointsMatch;
    private javax.swing.JLabel jLabel_TotalPointsRobot;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItem_Open;
    private javax.swing.JMenuItem jMenuItem_OpenCSV;
    private javax.swing.JMenuItem jMenuItem_Save;
    private javax.swing.JMenuItem jMenuItem_SaveAs;
    private javax.swing.JMenu jMenu_Edit;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JPanel jPanel_Graphics;
    private javax.swing.JPanel jPanel_Insights;
    private javax.swing.JPanel jPanel_RawPanel;
    private javax.swing.JPanel jPanel_Scout;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane_TopAvgMatchScores;
    private javax.swing.JScrollPane jScrollPane_TopAvgScorePerf;
    private javax.swing.JScrollPane jScrollPane_TopDef;
    private javax.swing.JScrollPane jScrollPane_TopIntake;
    private javax.swing.JScrollPane jScrollPane_TopMatchScores;
    private javax.swing.JSlider jSlider_DefPerf;
    private javax.swing.JSlider jSlider_IntakePerf;
    private javax.swing.JSlider jSlider_ScorePerf;
    private javax.swing.JSpinner jSpinner_MatchNumber;
    private javax.swing.JSpinner jSpinner_Placement;
    private javax.swing.JTabbedPane jTabbedPane_Tabs;
    private javax.swing.JTable jTable_Raw;
    private javax.swing.JTable jTable_TopAvgMatchScores;
    private javax.swing.JTable jTable_TopAvgScorePerf;
    private javax.swing.JTable jTable_TopDef;
    private javax.swing.JTable jTable_TopIntake;
    private javax.swing.JTable jTable_TopMatchScores;
    private javax.swing.JTextField jTextField_AutoLH;
    private javax.swing.JTextField jTextField_AutoLHAttempt;
    private javax.swing.JTextField jTextField_AutoUH;
    private javax.swing.JTextField jTextField_AutoUHAttempted;
    private javax.swing.JTextField jTextField_Comments;
    private javax.swing.JTextField jTextField_InsightsTeamNumber;
    private javax.swing.JTextField jTextField_ScoutName;
    private javax.swing.JTextField jTextField_TeamNumber;
    private javax.swing.JTextField jTextField_TeleopLH;
    private javax.swing.JTextField jTextField_TeleopUH;
    private javax.swing.JTextField jTextField_TotalPoints;
    private javax.swing.JTextField jTextField_TotalPointsMatch;
    // End of variables declaration//GEN-END:variables

    public boolean checkSubmissions() {
        // Method that prevents a submission for a match if all fields are not filled, and then highlights unused fields
        boolean turn = true;

        if ((Integer) (jSpinner_MatchNumber.getValue()) == 0) {
            jSpinner_MatchNumber.setBackground(Color.red);
            turn = false;
        }

        if ((Integer) (jSpinner_Placement.getValue()) == 0) {
            jSpinner_MatchNumber.setBackground(Color.red);
            turn = false;
        }

        if (jTextField_AutoLHAttempt.getText().equals("")) {
            jTextField_AutoLHAttempt.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_AutoUHAttempted.getText().equals("")) {
            jTextField_AutoUHAttempted.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_AutoLH.getText().equals("")) {
            jTextField_AutoLH.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_AutoUH.getText().equals("")) {
            jTextField_AutoUH.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_TeleopUH.getText().equals("")) {
            jTextField_TeleopUH.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_TeleopLH.getText().equals("")) {
            jTextField_TeleopLH.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_TeamNumber.getText().equals("")) {
            jTextField_TeamNumber.setBackground(Color.red);
            turn = false;
        }
        if (jTextField_ScoutName.getText().equals("")) {
            jTextField_ScoutName.setBackground(Color.red);
            turn = false;
        }

        if (turn == false) {
            return false;
        }
        return true;
    }

    public void clearHighlights() {
        // Sets background colors of match submission fields to white
        jSpinner_MatchNumber.setBackground(Color.white);
        jSpinner_Placement.setBackground(Color.white);

        jTextField_AutoLHAttempt.setBackground(Color.white);
        jTextField_TeamNumber.setBackground(Color.white);
        jTextField_ScoutName.setBackground(Color.white);
        jTextField_AutoUHAttempted.setBackground(Color.white);
        jTextField_AutoLH.setBackground(Color.white);
        jTextField_AutoUH.setBackground(Color.white);
        jTextField_TeleopUH.setBackground(Color.white);
        jTextField_TeleopLH.setBackground(Color.white);
    }

    public void updateRawTable() {
        // Uses a Default Table model to create a table of raw data submissions from the matches keyset
        // 
        DefaultTableModel model = (DefaultTableModel) jTable_Raw.getModel();
        model.setRowCount(0);

        for (Integer key : matches.keySet()) {
            // Gets each match and builds an Object[] array out of the data
            Match m = matches.get(key);
            Object[] row = new Object[5];

            if (m.getBlue1() != null) {
                row[0] = m.getBlue1().getMatchNumber();
                row[1] = m.getBlue1().getTeamNumber();
                row[2] = m.getBlue1().getScoutName();
                row[3] = m.getBlue1().getScore();
                row[4] = m.getBlue1().getComments();

                model.addRow(row);
            }

            if (m.getBlue2() != null) {
                row[0] = m.getBlue2().getMatchNumber();
                row[1] = m.getBlue2().getTeamNumber();
                row[2] = m.getBlue2().getScoutName();
                row[3] = m.getBlue2().getScore();
                row[4] = m.getBlue2().getComments();

                model.addRow(row);
            }

            if (m.getBlue3() != null) {
                row[0] = m.getBlue3().getMatchNumber();
                row[1] = m.getBlue3().getTeamNumber();
                row[2] = m.getBlue3().getScoutName();
                row[3] = m.getBlue3().getScore();
                row[4] = m.getBlue3().getComments();

                model.addRow(row);
            }

            if (m.getRed1() != null) {
                row[0] = m.getRed1().getMatchNumber();
                row[1] = m.getRed1().getTeamNumber();
                row[2] = m.getRed1().getScoutName();
                row[3] = m.getRed1().getScore();
                row[4] = m.getRed1().getComments();

                model.addRow(row);
            }

            if (m.getRed2() != null) {
                row[0] = m.getRed2().getMatchNumber();
                row[1] = m.getRed2().getTeamNumber();
                row[2] = m.getRed2().getScoutName();
                row[3] = m.getRed2().getScore();
                row[4] = m.getRed2().getComments();

                model.addRow(row);
            }

            if (m.getRed3() != null) {
                row[0] = m.getRed3().getMatchNumber();
                row[1] = m.getRed3().getTeamNumber();
                row[2] = m.getRed3().getScoutName();
                row[3] = m.getRed3().getScore();
                row[4] = m.getRed3().getComments();

                model.addRow(row);
            }
        }
        
        updateHeighestTables();
    }
    
    public void updateHeighestTables() {
        // Updates tables for highest scores on the insights tab, does not run
        // if there are less than 10 matches in the <matches> treeset.
        if (matches.size() < 10) {
            return;
        }
        
        updateHeighestScoreTable();
        updateHeighestAvgScoreTable();
        updateHeighestIntakeTable();
        updateHeighestScoringPerfomanceTable();
        updateHeighestDefenseTable();
    }
    
    public void updateHeighestScoreTable() {
        // Stores an arraylist of the top ten scoring matches and creates a table
        // of them using the defaultTableModel. All data put into the table is also
        // formatted before it is added to the table for readability.
        int[] topTen = new int[10];
        
        TreeMap<Integer, Match> matchesCopy = new TreeMap<>();
        matchesCopy.putAll(matches);
        
        for (int i = 0; i < 10; i++) {
            int heighestMatchScore = 0;
            int heighestMatchScoreKey = 0;
            for (int key : matchesCopy.keySet()) {
                if (matchesCopy.get(key).getMatchScore(Match.AllianceColor.ALL) > heighestMatchScore) {
                    heighestMatchScore = matchesCopy.get(key).getMatchScore(Match.AllianceColor.ALL);
                    heighestMatchScoreKey = key;
                }
            }
            topTen[i] = heighestMatchScoreKey;
            matchesCopy.remove(heighestMatchScoreKey);
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable_TopMatchScores.getModel();
        model.setRowCount(0);
        
        for (int key : topTen) {
            Object[] row = new Object[8];
            
            row[0] = key;
            
            if (matches.get(key).getMatchScore(Match.AllianceColor.BLUE) > matches.get(key).getMatchScore(Match.AllianceColor.RED)) {
                row[1] = "(" + matches.get(key).getMatchScore(Match.AllianceColor.ALL) + ") BLUE: " + matches.get(key).getMatchScore(Match.AllianceColor.BLUE);
            }
            else {
                row[1] = "(" + matches.get(key).getMatchScore(Match.AllianceColor.ALL) + ") RED: " + matches.get(key).getMatchScore(Match.AllianceColor.RED);
            }
            
            row[2] = matches.get(key).getRed1() == null ? "" : "(Team " + matches.get(key).getRed1().getTeamNumber() + "): " + matches.get(key).getRed1().getScore();
            row[3] = matches.get(key).getRed2() == null ? "" : "(Team " + matches.get(key).getRed2().getTeamNumber() + "): " + matches.get(key).getRed2().getScore();
            row[4] = matches.get(key).getRed3() == null ? "" : "(Team " + matches.get(key).getRed3().getTeamNumber() + "): " + matches.get(key).getRed3().getScore();
            row[5] = matches.get(key).getBlue1() == null ? "" : "(Team " + matches.get(key).getBlue1().getTeamNumber() + "): " + matches.get(key).getBlue1().getScore();
            row[6] = matches.get(key).getBlue2() == null ? "" : "(Team " + matches.get(key).getBlue2().getTeamNumber() + "): " + matches.get(key).getBlue2().getScore();
            row[7] = matches.get(key).getBlue3() == null ? "" : "(Team " + matches.get(key).getBlue3().getTeamNumber() + "): " + matches.get(key).getBlue3().getScore();
                    
            model.addRow(row);
        }
    }
    
    public void updateHeighestAvgScoreTable() {
        // Updates the highest average score table to display the top ten robots
        // scores by gathering scores from matches and creating a list of robots with scores 
        TreeMap<Integer, ArrayList<Robot>> robots = new TreeMap<Integer, ArrayList<Robot>>();
                
        for (int key : matches.keySet()) {
            Robot r;
            ArrayList<Robot> ro;
            int teamNumber;
            
            if (matches.get(key).getBlue1() != null) {
                r = matches.get(key).getBlue1();
                teamNumber = matches.get(key).getBlue1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getBlue2() != null) {
                r = matches.get(key).getBlue2();
                teamNumber = matches.get(key).getBlue2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            } 
             
            if (matches.get(key).getBlue3() != null) {
                r = matches.get(key).getBlue3();
                teamNumber = matches.get(key).getBlue3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed1() != null) {
                r = matches.get(key).getRed1();
                teamNumber = matches.get(key).getRed1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed2() != null) {
                r = matches.get(key).getRed2();
                teamNumber = matches.get(key).getRed2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getRed3() != null) {
                r = matches.get(key).getRed3();
                teamNumber = matches.get(key).getRed3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
        }
        
        TreeMap<Integer, Double> averages = new TreeMap<Integer, Double>();
        for (int team : robots.keySet()) {
            int count = 0;
            double score = 0;
            for (Robot r : robots.get(team)) {
                count++;
                score += r.getScore();
            }
            if (count != 0) {
               averages.put(team, score / count); 
            }
        }
        
        int[] topTen = new int[10];
        
        TreeMap<Integer, Double> averagesCopy = new TreeMap<>();
        averagesCopy.putAll(averages);
        
        for (int i = 0; i < 10; i++) {
            double heighestScore = 0;
            int heighestScoreKey = 0;
            for (int key : averagesCopy.keySet()) {
                if (averagesCopy.get(key) > heighestScore) {
                    heighestScore = averagesCopy.get(key);
                    heighestScoreKey = key;
                }
            }
            topTen[i] = heighestScoreKey;
            averagesCopy.remove(heighestScoreKey);
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable_TopAvgMatchScores.getModel();
        model.setRowCount(0);
        
        int i = 0;
        for (int key : topTen) {
            Object[] row = new Object[2];
            row[0] = key;
            row[1] = averages.get(key);
                  
            model.addRow(row);
            i++;
        }
    }
    
    public void updateHeighestIntakeTable() {
        //Updates the table for highest intake ratings using data from <matches> 
        // treemap by creating a list of robots and averaging their intake scores across matches
        
        TreeMap<Integer, ArrayList<Robot>> robots = new TreeMap<Integer, ArrayList<Robot>>();
                
        for (int key : matches.keySet()) {
            Robot r;
            ArrayList<Robot> ro;
            int teamNumber;
            
            if (matches.get(key).getBlue1() != null) {
                r = matches.get(key).getBlue1();
                teamNumber = matches.get(key).getBlue1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getBlue2() != null) {
                r = matches.get(key).getBlue2();
                teamNumber = matches.get(key).getBlue2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            } 
             
            if (matches.get(key).getBlue3() != null) {
                r = matches.get(key).getBlue3();
                teamNumber = matches.get(key).getBlue3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed1() != null) {
                r = matches.get(key).getRed1();
                teamNumber = matches.get(key).getRed1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed2() != null) {
                r = matches.get(key).getRed2();
                teamNumber = matches.get(key).getRed2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getRed3() != null) {
                r = matches.get(key).getRed3();
                teamNumber = matches.get(key).getRed3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
        }
        
        TreeMap<Integer, Double> averages = new TreeMap<Integer, Double>();
        for (int team : robots.keySet()) {
            int count = 0;
            double score = 0;
            for (Robot r : robots.get(team)) {
                count++;
                score += r.getTeleop().getIntakePerform();
            }
            if (count != 0) {
               averages.put(team, score / count); 
            }
        }
        
        int[] topTen = new int[10];
        
        TreeMap<Integer, Double> averagesCopy = new TreeMap<>();
        averagesCopy.putAll(averages);
        
        for (int i = 0; i < 10; i++) {
            double heighestScore = 0;
            int heighestScoreKey = 0;
            for (int key : averagesCopy.keySet()) {
                if (averagesCopy.get(key) > heighestScore) {
                    heighestScore = averagesCopy.get(key);
                    heighestScoreKey = key;
                }
            }
            topTen[i] = heighestScoreKey;
            averagesCopy.remove(heighestScoreKey);
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable_TopIntake.getModel();
        model.setRowCount(0);
        
        int i = 0;
        for (int key : topTen) {
            Object[] row = new Object[2];
            row[0] = key;
            row[1] = averages.get(key);
                  
            model.addRow(row);
            i++;
        }
    }
    
    public void updateHeighestScoringPerfomanceTable() {
        // Cerates a table of robots with the highest scoring performance rating
        // which is gathered by creating an treemap of robots and their matches and storing their
        // scoring information in each robot from the existing data in <matches>
        
        TreeMap<Integer, ArrayList<Robot>> robots = new TreeMap<Integer, ArrayList<Robot>>();
                
        for (int key : matches.keySet()) {
            Robot r;
            ArrayList<Robot> ro;
            int teamNumber;
            
            if (matches.get(key).getBlue1() != null) {
                r = matches.get(key).getBlue1();
                teamNumber = matches.get(key).getBlue1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getBlue2() != null) {
                r = matches.get(key).getBlue2();
                teamNumber = matches.get(key).getBlue2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            } 
             
            if (matches.get(key).getBlue3() != null) {
                r = matches.get(key).getBlue3();
                teamNumber = matches.get(key).getBlue3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed1() != null) {
                r = matches.get(key).getRed1();
                teamNumber = matches.get(key).getRed1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed2() != null) {
                r = matches.get(key).getRed2();
                teamNumber = matches.get(key).getRed2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getRed3() != null) {
                r = matches.get(key).getRed3();
                teamNumber = matches.get(key).getRed3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
        }
        
        TreeMap<Integer, Double> averages = new TreeMap<Integer, Double>();
        for (int team : robots.keySet()) {
            int count = 0;
            double score = 0;
            for (Robot r : robots.get(team)) {
                count++;
                score += r.getTeleop().getScoringPerform();
            }
            if (count != 0) {
               averages.put(team, score / count); 
            }
        }
        
        int[] topTen = new int[10];
        
        TreeMap<Integer, Double> averagesCopy = new TreeMap<>();
        averagesCopy.putAll(averages);
        
        for (int i = 0; i < 10; i++) {
            double heighestScore = 0;
            int heighestScoreKey = 0;
            for (int key : averagesCopy.keySet()) {
                if (averagesCopy.get(key) > heighestScore) {
                    heighestScore = averagesCopy.get(key);
                    heighestScoreKey = key;
                }
            }
            topTen[i] = heighestScoreKey;
            averagesCopy.remove(heighestScoreKey);
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable_TopAvgScorePerf.getModel();
        model.setRowCount(0);
        
        int i = 0;
        for (int key : topTen) {
            Object[] row = new Object[2];
            row[0] = key;
            row[1] = averages.get(key);
                  
            model.addRow(row);
            i++;
        }
    }
    
    public void updateHeighestDefenseTable() {
        // Creates a table of robots with the highest defense ratings by creating a treemap
        // of robots and their matches in an arraylist and calculating their average
        // defense rating accross their matches.
        TreeMap<Integer, ArrayList<Robot>> robots = new TreeMap<Integer, ArrayList<Robot>>();
                
        for (int key : matches.keySet()) {
            Robot r;
            ArrayList<Robot> ro;
            int teamNumber;
            
            if (matches.get(key).getBlue1() != null) {
                r = matches.get(key).getBlue1();
                teamNumber = matches.get(key).getBlue1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getBlue2() != null) {
                r = matches.get(key).getBlue2();
                teamNumber = matches.get(key).getBlue2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            } 
             
            if (matches.get(key).getBlue3() != null) {
                r = matches.get(key).getBlue3();
                teamNumber = matches.get(key).getBlue3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed1() != null) {
                r = matches.get(key).getRed1();
                teamNumber = matches.get(key).getRed1().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
               
            if (matches.get(key).getRed2() != null) {
                r = matches.get(key).getRed2();
                teamNumber = matches.get(key).getRed2().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
            
            if (matches.get(key).getRed3() != null) {
                r = matches.get(key).getRed3();
                teamNumber = matches.get(key).getRed3().getTeamNumber();
                ro = new ArrayList<Robot>();
                ro.add(r);
                if (robots.containsKey(teamNumber)) {
                    ro.addAll(robots.get(teamNumber));
                }
                robots.put(teamNumber, ro);
            }
        }
        
        TreeMap<Integer, Double> averages = new TreeMap<Integer, Double>();
        for (int team : robots.keySet()) {
            int count = 0;
            double score = 0;
            for (Robot r : robots.get(team)) {
                count++;
                score += r.getTeleop().getDefensivePerform();
            }
            if (count != 0) {
               averages.put(team, score / count); 
            }
        }
        
        int[] topTen = new int[10];
        
        TreeMap<Integer, Double> averagesCopy = new TreeMap<>();
        averagesCopy.putAll(averages);
        
        for (int i = 0; i < 10; i++) {
            double heighestScore = 0;
            int heighestScoreKey = 0;
            for (int key : averagesCopy.keySet()) {
                if (averagesCopy.get(key) > heighestScore) {
                    heighestScore = averagesCopy.get(key);
                    heighestScoreKey = key;
                }
            }
            topTen[i] = heighestScoreKey;
            averagesCopy.remove(heighestScoreKey);
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable_TopDef.getModel();
        model.setRowCount(0);
        
        int i = 0;
        for (int key : topTen) {
            Object[] row = new Object[2];
            row[0] = key;
            row[1] = averages.get(key);
                  
            model.addRow(row);
            i++;
        }
    }

    private void loadMatchesFromCSV(String fileName) {
        // Loads data for matches from a .csv file format for easy data entry from outside
        // sources.
        try {
            Scanner file = new Scanner(new File(fileName));
            System.out.println("opening csv");
            file.nextLine();
            int i = 0;
            while (file.hasNextLine()) {

                Robot r;
                Auto a;
                TeleOp t;
                EndGame e;

                Scanner line = new Scanner(file.nextLine());
                line.useDelimiter(",");

                String scoutName = line.next();

                int teamNumber = Integer.parseInt(line.next());
                int matchNumber = Integer.parseInt(line.next());

                String allianceColor = line.next();

                int fieldPlacement = Integer.parseInt(line.next());

                String generalAutoBehavior = line.next();
                int ab;
                if (generalAutoBehavior.contains("Attempted to Score")) {
                    ab = 2;
                } else if (generalAutoBehavior.contains("Attempted to Pick Up Cargo")) {
                    ab = 3;
                } else {
                    ab = 1;
                }

                int upperHubShotsMadeAUTO = Integer.parseInt(line.next());
                int upperHubShotsAttemptedAUTO = Integer.parseInt(line.next());
                int lowerHubShotsMadeAUTO = Integer.parseInt(line.next());
                int lowerHubShotsAttemptedAUTO = Integer.parseInt(line.next());

                String generalTeleopBehavior = line.next();
                int tb;
                if (generalTeleopBehavior.contains("Attempted to Score")) {
                    tb = 3;
                } else if (generalTeleopBehavior.contains("Attempted to Pick Up Cargo")) {
                    tb = 2;
                } else {
                    tb = 1;
                }

                String intakeSystem = line.next();
                int is;
                if (intakeSystem.contains("Intake on the Robot")) {
                    is = 3;
                } else if (intakeSystem.contains("From the Human Player")) {
                    is = 2;
                } else {
                    is = 1;
                }

                double rateIntakeperformance = Integer.parseInt(line.next()) * 0.2;
                double rateScoringPerformance = Integer.parseInt(line.next()) * 0.2;
                double rateDefensivePerformance = Integer.parseInt(line.next()) * 0.2;

                int upperHubShotsMadeTELEOP = Integer.parseInt(line.next());
                int lowerHubShotsMadeTELEOP = Integer.parseInt(line.next());

                String endgame = line.next();
                int eb;
                if (endgame.contains("Didn't attempt to climb.")) {
                    eb = 0;
                } else if (endgame.contains("Attempted")) {
                    eb = 1;
                } else if (endgame.contains("Traversal")) {
                    eb = 5;
                } else if (endgame.contains("High Rung")) {
                    eb = 4;
                } else if (endgame.contains("Mid Rung")) {
                    eb = 3;
                } else {
                    eb = 2;
                }

                String comments = line.next();

                a = new Auto(upperHubShotsMadeAUTO, upperHubShotsAttemptedAUTO, lowerHubShotsMadeAUTO, lowerHubShotsAttemptedAUTO, ab, generalAutoBehavior.contains("Taxi"));
                t = new TeleOp(upperHubShotsMadeTELEOP, lowerHubShotsMadeTELEOP, tb, rateIntakeperformance, rateScoringPerformance, rateDefensivePerformance, is);
                e = new EndGame(eb);
                r = new Robot(matchNumber, allianceColor, fieldPlacement, teamNumber, scoutName, comments, a, t, e);

                if (matches.containsKey(matchNumber)) {
                    matches.get(matchNumber).setRobot(r);
                } else {
                    Match m = new Match(matchNumber);
                    m.setRobot(r);

                    matches.put(matchNumber, m);
                }
            }
            System.out.println("csv opened");
            updateRawTable();
        } catch (FileNotFoundException e) {
            System.out.println(e.toString());
        }
    }
    
    private void saveFile(File file) {
        // Saves a given file by writting it to the FileOutputStream and ObjectOutputStream
        try {
                FileOutputStream fos = new FileOutputStream(file);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                
                oos.writeObject(new matchModel(matches));
                
                oos.close();
                
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
    } 
}
